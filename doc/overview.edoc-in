@copyright 2015-2024 SigScale Global Inc.
@version %VERSION%
@title %DESCRIPTION%
@reference <a href="http://tools.ietf.org/rfc/rfc2719">RFC2719: Framework Architecture for Signaling Transport</a>
@reference <a href="http://tools.ietf.org/rfc/rfc4166">RFC4166: Telephony Signalling Transport over Stream Control Transmission Protocol (SCTP) Applicability Statement</a>
@reference <a href="http://tools.ietf.org/rfc/rfc4666">RFC4666: Signaling System 7 (SS7) Message Transfer Part 3 (MTP3) - User Adaptation Layer (M3UA)</a>
@doc This application implements an M3UA protocol stack.

==Introduction==
The Signaling Transport (SIGTRAN) protocol suite provides for transport
of telephony signaling protocol messages over Internet Protocol (IP) networks.
The Stream Control Transmission Protocol (SCTP) is defined for resilience and
reliability. User layer adaptations are defined for Signaling System 7 (SS7)
and ISDN communications protocols.

The MTP3 user adaptation (M3UA) defines a protocol for supporting the
transport of any SS7 MTP3-User signalling (e.g. ISUP or SCCP) over IP
using the services of SCTP. This protocol is used to interconnect an SS7
Signaling Gateway (SG) with Application Servers (AS).

An SG/AS may have multiple process instances (SGP/ASP) where each process
contains an SCTP association to an M3UA peer SGP/ASP. Traffic may be
loadshared across these associations. 

In this implementation an AS/SG may be composed of processes distributed
across a cluster. 

A symetrical arrangement, with a balanced pair of ASPs, is also supported.
These are sometimes referred to as IP Server Process (IPSP), however we
will use the ASP terminology consistently here.

==State &amp; Traffic Management==
The M3UA layer at the SGP maintains the availability state of all
configured remote ASPs, to manage the SCTP Associations and the
traffic between the M3UA peers. The ASP states and transitions are
shown in <a href="asp-states.png">Figure 1-1</a>.

<img alt="asp state machine" src="asp-states.png" /><br />
<a href="asp-states.png">Figure 1-1</a>

Each AS may be configured for a minimum and maximum number of ASPs.
If the minimum number of ASPs are not in an active state the AS
is not available. The dynamic lifecycles of M3UA-peer ASP/SGP will
drive the AS state. The ASP states and transitions are shown in
<a href="as-states.png">Figure 1-2</a>.

<img alt="as state machine" src="as-states.png" /><br />
<a href="asp-states.png">Figure 1-2</a>

==Messaging==
The actors and interfaces of the {@link //m3ua. m3ua} application
are shown in <a href="boundaries.png">Figure 2-1</a>.

<img alt="boundary interfaces" src="boundaries.png" /><br />
<a href="boundaries.png">Figure 2-1</a>

===MTP3-User Primitives (1) ===
<ul>
	<li>M3UA &#8594; MTP-TRANSFER request</li>
	<li>M3UA &#8594; MTP-TRANSFER confirm</li>
	<li>M3UA &#8594; MTP-TRANSFER indication</li>
	<li>M3UA &#8594; MTP-PAUSE indication</li>
	<li>M3UA &#8594; MTP-RESUME indication</li>
	<li>M3UA &#8594; MTP-STATUS indication</li>
</ul>

An MTP-TRANSFER request primitive is accomplished with
{@link //m3ua/m3ua:transfer/9. m3ua:transfer/9,10}.

A behaviour module provides an MTP service primitives interface
for an MTP user. A callback module name is provided when starting
an `Endpoint'. MTP service primitive indications are delivered to
the MTP3-User through calls to the corresponding callback functions.

<ul>
	<li>{@link //m3ua/m3ua_callback:send/11. m3ua_callback:send/11}</li>
	<li>{@link //m3ua/m3ua_callback:recv/9. m3ua_callback:recv/9}</li>
	<li>{@link //m3ua/m3ua_callback:pause/1. m3ua_callback:pause/1}</li>
	<li>{@link //m3ua/m3ua_callback:resume/1. m3ua_callback:resume/1}</li>
	<li>{@link //m3ua/m3ua_callback:status/1. m3ua_callback:status/1}</li>
</ul>

===Layer Management API (2)===
The public API for managing the M3UA application and stack is
found in the {@link //m3ua/m3ua. m3ua} module.

Layer management service primitive indications are delivered to
an MTP3-User through callback functions:

<ul>
	<li>{@link //m3ua/m3ua_callback:asp_up/1. m3ua_callback:asp_up/1}</li>
	<li>{@link //m3ua/m3ua_callback:asp_down/1. m3ua_callback:asp_down/1}</li>
	<li>{@link //m3ua/m3ua_callback:asp_active/1. m3ua_callback:asp_active/1}</li>
	<li>{@link //m3ua/m3ua_callback:asp_inactive/1. m3ua_callback:asp_inactive/1}</li>
	<li>{@link //m3ua/m3ua_callback:notify/4. m3ua_callback:notify/4}</li>
</ul>

===Layer Management Primitives (3)===
<ul>
	<li>M3UA &#8594; M-SCTP_ESTABLISH indication</li>
	<li>M3UA &#8592; M-SCTP_RELEASE request</li>
	<li>M3UA &#8594; M-SCTP_RELEASE confirm</li>
	<li>M3UA &#8592; M-SCTP_STATUS request</li>
	<li>M3UA &#8594; M-SCTP_STATUS confirm</li>
	<li>M3UA &#8592; M-RK_REG request,</li>
	<li>M3UA &#8594; M-RK_REG confirm</li>
	<li>M3UA &#8592; M-ASP_STATUS request</li>
	<li>M3UA &#8594; M-ASP_STATUS confirm</li>
	<li>M3UA &#8592; M-ASP_UP request</li>
	<li>M3UA &#8594; M-ASP_UP confirm</li>
	<li>M3UA &#8592; M-ASP_DOWN request</li>
	<li>M3UA &#8594; M-ASP_DOWN confirm</li>
	<li>M3UA &#8592; M-ASP_ACTIVE request</li>
	<li>M3UA &#8594; M-ASP_ACTIVE confirm</li>
	<li>M3UA &#8592; M-ASP_INACTIVE request</li>
	<li>M3UA &#8594; M-ASP_INACTIVE confirm</li>
	<li>M3UA &#8594; M-NOTIFY indication</li>
</ul>

===SCTP Primitives (4)===
See {@link //kernel/gen_sctp. gen_sctp}.

==Messaging==
The message sequence for an AS with one ASP is charted in 
<a href="message-sequence.png">Figure 3-1</a>.

<img alt="message sequence chart" src="message-sequence.png" /><br />
<a href="mesage-sequence.png">Figure 3-1</a>

==Installation==
Before starting the application for the first time, {@link //mnesia/mnesia. mnesia}
should be initialized. Create a schema and start mnesia on all nodes
where the application {@link //m3ua. m3ua} application will run.

The following command will initialize {@link //m3ua. m3ua} on the current node.

e.g &#058;
	```
	(m3ua@host)1> m3ua_app:install().
	{ok, [m3ua_as, m3ua_asp]}
	'''

==Operation==
Start an M3UA Signaling Gateway Process (SGP) endpoint:
```
	1> application:start(m3ua).
	ok
	2> {ok, EP} = m3ua:start(Module, 2905, []).
	{ok,<0.51.0>}
'''
Create an M3UA Application Server Process (ASP) endpoint:
```
	1> application:start(m3ua).
	ok
	2> {ok, EP} = m3ua:start(Module, 0, [{connect, {127,0,0,1}, 2905, []}, {role, asp}]).
	{ok,<0.51.0>}
'''

==Database Schema==
<table id="mt">
	<caption id="mt">There are two persistent {@link //mnesia. mnesia} tables:</caption>
	<thead>
		<tr id="mt">
			<th id="mt">Table Name</th>
			<th id="mt">Description</th>
		</tr>
	</thead>
	<tbody>
		<tr id="mt">
			<td id="mt">m3ua_as</td>
			<td id="mt">Application Server (AS)</td>
		</tr>
		<tr id="mt">
			<td id="mt">m3ua_asp</td>
			<td id="mt">AS Process (ASP)</td>
		</tr>
	</tbody>
</table>

